#ifndef _eo_int_
#define _eo_int_

#include "eo_any.h"

//==============================================================================
// Объявление целочисленного атомарного объекта и вложенных в него подобъектов
//==============================================================================

//------------------------------------------------------------------------------
// Объект, непосредственно вложенный в eoInt, преобразующий число в строку
typedef struct EoIntAsString {
  EoHead head;        // базовая часть для идентификации и связи объектов
  char str[20];       // строковый буфер для хранения символьного представления
} EoIntAsString;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, складывающий два целых
typedef struct EoIntAdd {
  EoHead head;        // базовая часть для идентификации и связи объектов
  struct EoInt* opd2; // Второй операнд операции сложения
} EoIntAdd;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, вычитающий для двух целых
typedef struct EoIntSub {
  EoHead head;        // базовая часть для идентификации и связи объектов
  struct EoInt* opd2; // второй операнд операции вычитания
} EoIntSub;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, проверяющий на равенство
// Пока реализован в возвратом целочисленного объекта, который в дальнейшем
// предполагается заменить на булевский
typedef struct EoIntEq {
  EoHead head;        // базовая часть для идентификации и связи объектов
  struct EoInt* opd2; // второй операнд операнд операции сравнения на равенство
} EoIntEq;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, проверяющий на "меньше"
// Пока реализован в возвратом целочисленного объекта, который в дальнейшем
// предполагается заменить на булевский
typedef struct EoIntLess {
  EoHead head;        // базовая часть для идентификации и связи объектов
  struct EoInt* opd2; // второй операнд операции сравнение на меньше
} EoIntLess;

//------------------------------------------------------------------------------
// Внешний атомарный целочисленный объект
typedef struct EoInt {
  EoHead head;    // базовая часть для идентификации и связи объектов
  int value;      // Значение, хранимое в данном объекте
  EoIntAsString asString; // Объект, формирующий строку символов по значению
  EoIntAdd  add;          // Объект, выполняющий сложение
  EoIntSub  sub;          // Объект, выполняющий вычитание
  EoIntAdd  eq;           // Объект, выполняющий сравнение eq
  EoIntSub  less;         // Объект, выполняющий сравнение less
} EoInt;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Функции, осуществляющие работу с целочисленным объектом
// Инициализация существующего целочисленного объекта
void init_EoInt(EoInt* obj, EoAny* parent, int value);
// Установка значения в целочисленном объекте
void set_EoInt_value(EoInt* obj, int value);

// Привязка второго операнда подобъекта add
void bind_EoIntAdd(EoInt* obj, EoInt* opd2);
// Привязка второго операнда подобъекта sub
void bind_EoIntSub(EoInt* obj, EoInt* opd2);
// Привязка второго операнда подобъекта eq
void bind_EoIntEq(EoInt* obj, EoInt* opd2);
// Привязка второго операнда подобъекта less
void bind_EoIntLess(EoInt* obj, EoInt* opd2);

// Получение (датаризация) целочисленного объекта
int eval_EoInt(EoAny* obj, EoAny* result);
// Получение (датаризация) строки для целочисленного объекта
int eval_EoIntAsString(EoAny* obj, EoAny* result);
// Сложение целочисленного объекта с объектом, привязанным к add
int eval_EoIntAdd(EoAny* obj, EoAny* result);
// Вычитание из целочисленного объекта объекта, привязанного к sub
int eval_EoIntSub(EoAny* obj, EoAny* result);
// Сравнение eq
int eval_EoIntEq(EoAny* obj, EoAny* result);
// Сравнение less
int eval_EoIntLess(EoAny* obj, EoAny* result);

#endif  // _eo_int_
