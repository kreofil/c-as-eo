#ifndef _eo_objects_
#define _eo_objects_

// Любой объект на C содержит необходимые данные и не более того.
// Обработка данных может вестись внешними функциями

//==============================================================================
// Объявление вспомогательного "любого" объекта,
// используемого в качестве базового типа.
// Физически объект данного типа существовать не должен

// Тэг "любого" объекта
//const int tagAny = 0;

// "Любой" объект
typedef struct eoAny {
  int tag; // уникальный признак внешнего объекта
} eoAny;

//==============================================================================
// Объявление целочисленного атомарного объекта и вложенных в него подобъектов

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, преобразующий число в строку
typedef struct eoIntAsString {
  char str[20];
} eoIntAsString;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, складывающий два целых
typedef struct eoIntAdd {
  struct eoInt* opd2;
} eoIntAdd;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, вычитающий для двух целых
typedef struct eoIntSub {
  struct eoInt* opd2;
} eoIntSub;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, проверяющий на равенство
// Пока реализован в возвратом целочисленного объекта, который в дальнейшем
// предполагается заменить на булевский
typedef struct eoIntEq {
  struct eoInt* opd2;
} eoIntEq;

//------------------------------------------------------------------------------
// Объект, непосредственнов вложенный в eoInt, проверяющий на "меньше"
// Пока реализован в возвратом целочисленного объекта, который в дальнейшем
// предполагается заменить на булевский
typedef struct eoIntLess {
  struct eoInt* opd2;
} eoIntLess;

// Тэг целочисленного объекта
//const int tagInt = 1;

//------------------------------------------------------------------------------
// Внешний атомарный целочисленный объект
typedef struct eoInt {
  int tag; // уникальный признак внешнего объекта
  int value;
  eoIntAsString asString; // Объект, формирующий строку символов по значению
  eoIntAdd  add;          // Объект, выполняющий сложение
  eoIntSub  sub;          // Объект, выполняющий вычитание
  eoIntAdd  eq;          // Объект, выполняющий сравнение eq
  eoIntSub  less;          // Объект, выполняющий сравнение less
} eoInt;

// Инициализация существующего целочисленного объекта
void init_eoInt(eoInt* obj, int value);
// Инициализация объекта add (привязка второго операнда)
void init_eoIntAdd(eoInt* obj, eoInt* opd2);
// Инициализация объекта sub (привязка второго операнда)
void init_eoIntSub(eoInt* obj, eoInt* opd2);
// Инициализация объекта eq (привязка второго операнда)
void init_eoIntEq(eoInt* obj, eoInt* opd2);
// Инициализация объекта less (привязка второго операнда)
void init_eoIntLess(eoInt* obj, eoInt* opd2);

// Получение (датаризация) целочисленного объекта
void get_eoInt(eoAny* obj, eoAny* result);
// Получение (датаризация) строки для целочисленного объекта
void get_eoIntAsString(eoAny* obj, eoAny* result);
// Сложение целочисленного объекта с объектом, привязанным к add
void get_eoIntAdd(eoAny* obj, eoAny* result);
// Вычитание из целочисленного объекта объекта, привязанного к sub
void get_eoIntSub(eoAny* obj, eoAny* result);
// Сравнение eq
void get_eoIntEq(eoAny* obj, eoAny* result);
// Сравнение less
void get_eoIntLess(eoAny* obj, eoAny* result);

//==============================================================================
// Объявление действительного атомарного объекта двойной точности
// и вложенных в него подобъектов

// Объект, непосредственнов вложенный в eoInt
typedef struct eoDoubleAsString {
  char str[30];
} eoDoubleAsString;

// Тэг действительного объекта
//const int tagDouble = 2;

// Внешний атомарный действительный объект
typedef struct eoDouble {
  int tag; // уникальный признак внешнего объекта
  double value;
  eoDoubleAsString asString; // Объект, формирующий строку символов по значению
} eoDouble;

// Инициализация существующего действительного объекта
void init_eoDouble(eoDouble* obj, double value);
// Получение (датаризация) действительного объекта
void get_eoDouble(eoAny* obj, eoAny* result);
// Получение (датаризация) строки для действительного объекта
void get_eoDoubleAsString(eoAny* obj, eoAny* result);

//==============================================================================
// Объявление объекта seq, задающего последовательность объектов

//enum { maxSeqsize = 10 };
typedef struct eoSeq {
  // Количество объектов в последовательности
  int length;
  // Массив последовательно расположенных объектов.
  // Формируется снаружи и присваивается данному указателю
  eoAny** objSeq;
} eoSeq;

// Инициализация, связана с передачей массива объектов и его размера
void init_eoSeq(eoSeq* obj, eoAny** eoSeq, int length);
// Получение (датаризация) последовательности объектов
void get_eoSeq(eoAny* obj, eoAny* result);

//==============================================================================
// Объявление объекта if и вложенных в него подобъектов

typedef struct eoIf {
  // Условие для выбора (пока целочисленный объект, потом булевский)
  eoInt* condition;
  // Объект, определяющий истинную ветку
  eoAny* trueBranch;
  // Объект, определяющий ложную ветку
  eoAny* falseBranch;
} eoIf;

#endif  // _eo_objects_
